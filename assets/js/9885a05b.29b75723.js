"use strict";(self.webpackChunk_sushiswap_kitchen_docs=self.webpackChunk_sushiswap_kitchen_docs||[]).push([[2813],{3905:(e,t,i)=>{i.d(t,{Zo:()=>s,kt:()=>h});var n=i(7294);function o(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function d(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){o(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function a(e,t){if(null==e)return{};var i,n,o=function(e,t){if(null==e)return{};var i,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(o[i]=e[i]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(o[i]=e[i])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):d(d({},t),e)),i},s=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var i=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),p=u(i),h=o,m=p["".concat(l,".").concat(h)]||p[h]||c[h]||r;return i?n.createElement(m,d(d({ref:t},s),{},{components:i})):n.createElement(m,d({ref:t},s))}));function h(e,t){var i=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=i.length,d=new Array(r);d[0]=p;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,d[1]=a;for(var u=2;u<r;u++)d[u]=i[u];return n.createElement.apply(null,d)}return n.createElement.apply(null,i)}p.displayName="MDXCreateElement"},2275:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>u});var n=i(7462),o=(i(7294),i(3905));const r={},d=void 0,a={unversionedId:"bentobox/MiniChefV2",id:"bentobox/MiniChefV2",title:"MiniChefV2",description:"MiniChefV2",source:"@site/docs/bentobox/MiniChefV2.md",sourceDirName:"bentobox",slug:"/bentobox/MiniChefV2",permalink:"/docs/bentobox/MiniChefV2",editUrl:"https://github.com/manifoldfinance/sushi-doc-portal/edit/master/docs/bentobox/MiniChefV2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Migrator",permalink:"/docs/bentobox/Migrator"},next:{title:"Multicall2",permalink:"/docs/bentobox/Multicall2"}},l={},u=[{value:"<code>MiniChefV2</code>",id:"minichefv2",level:2},{value:"<code>constructor(contract IERC20 _sushi)</code> (public)",id:"constructorcontract-ierc20-_sushi-public",level:3},{value:"<code>poolLength() \u2192 uint256 pools</code> (public)",id:"poollength--uint256-pools-public",level:3},{value:"<code>add(uint256 allocPoint, contract IERC20 _lpToken, contract IRewarder _rewarder)</code> (public)",id:"adduint256-allocpoint-contract-ierc20-_lptoken-contract-irewarder-_rewarder-public",level:3},{value:"<code>set(uint256 _pid, uint256 _allocPoint, contract IRewarder _rewarder, bool overwrite)</code> (public)",id:"setuint256-_pid-uint256-_allocpoint-contract-irewarder-_rewarder-bool-overwrite-public",level:3},{value:"<code>setSushiPerSecond(uint256 _sushiPerSecond)</code> (public)",id:"setsushiperseconduint256-_sushipersecond-public",level:3},{value:"<code>setMigrator(contract IMigratorChef _migrator)</code> (public)",id:"setmigratorcontract-imigratorchef-_migrator-public",level:3},{value:"<code>migrate(uint256 _pid)</code> (public)",id:"migrateuint256-_pid-public",level:3},{value:"<code>pendingSushi(uint256 _pid, address _user) \u2192 uint256 pending</code> (external)",id:"pendingsushiuint256-_pid-address-_user--uint256-pending-external",level:3},{value:"<code>massUpdatePools(uint256[] pids)</code> (external)",id:"massupdatepoolsuint256-pids-external",level:3},{value:"<code>updatePool(uint256 pid) \u2192 struct MiniChefV2.PoolInfo pool</code> (public)",id:"updatepooluint256-pid--struct-minichefv2poolinfo-pool-public",level:3},{value:"<code>deposit(uint256 pid, uint256 amount, address to)</code> (public)",id:"deposituint256-pid-uint256-amount-address-to-public",level:3},{value:"<code>withdraw(uint256 pid, uint256 amount, address to)</code> (public)",id:"withdrawuint256-pid-uint256-amount-address-to-public",level:3},{value:"<code>harvest(uint256 pid, address to)</code> (public)",id:"harvestuint256-pid-address-to-public",level:3},{value:"<code>withdrawAndHarvest(uint256 pid, uint256 amount, address to)</code> (public)",id:"withdrawandharvestuint256-pid-uint256-amount-address-to-public",level:3},{value:"<code>emergencyWithdraw(uint256 pid, address to)</code> (public)",id:"emergencywithdrawuint256-pid-address-to-public",level:3},{value:"<code>Deposit(address user, uint256 pid, uint256 amount, address to)</code>",id:"depositaddress-user-uint256-pid-uint256-amount-address-to",level:3},{value:"<code>Withdraw(address user, uint256 pid, uint256 amount, address to)</code>",id:"withdrawaddress-user-uint256-pid-uint256-amount-address-to",level:3},{value:"<code>EmergencyWithdraw(address user, uint256 pid, uint256 amount, address to)</code>",id:"emergencywithdrawaddress-user-uint256-pid-uint256-amount-address-to",level:3},{value:"<code>Harvest(address user, uint256 pid, uint256 amount)</code>",id:"harvestaddress-user-uint256-pid-uint256-amount",level:3},{value:"<code>LogPoolAddition(uint256 pid, uint256 allocPoint, contract IERC20 lpToken, contract IRewarder rewarder)</code>",id:"logpooladditionuint256-pid-uint256-allocpoint-contract-ierc20-lptoken-contract-irewarder-rewarder",level:3},{value:"<code>LogSetPool(uint256 pid, uint256 allocPoint, contract IRewarder rewarder, bool overwrite)</code>",id:"logsetpooluint256-pid-uint256-allocpoint-contract-irewarder-rewarder-bool-overwrite",level:3},{value:"<code>LogUpdatePool(uint256 pid, uint64 lastRewardTime, uint256 lpSupply, uint256 accSushiPerShare)</code>",id:"logupdatepooluint256-pid-uint64-lastrewardtime-uint256-lpsupply-uint256-accsushipershare",level:3},{value:"<code>LogSushiPerSecond(uint256 sushiPerSecond)</code>",id:"logsushiperseconduint256-sushipersecond",level:3},{value:"<code>UserInfo</code>",id:"userinfo",level:3},{value:"<code>PoolInfo</code>",id:"poolinfo",level:3}],s={toc:u};function c(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"minichefv2"},(0,o.kt)("inlineCode",{parentName:"h2"},"MiniChefV2")),(0,o.kt)("p",null,"The (older) MasterChef contract gives out a constant number of SUSHI tokens per\nblock. It is the only address with minting rights for SUSHI. The idea for this\nMasterChef V2 (MCV2) contract is therefore to be the owner of a dummy token that\nis deposited into the MasterChef V1 (MCV1) contract. The allocation point for\nthis pool on MCV1 is the total allocation point for all pools that receive\ndouble incentives."),(0,o.kt)("h3",{id:"constructorcontract-ierc20-_sushi-public"},(0,o.kt)("inlineCode",{parentName:"h3"},"constructor(contract IERC20 _sushi)")," (public)"),(0,o.kt)("h3",{id:"poollength--uint256-pools-public"},(0,o.kt)("inlineCode",{parentName:"h3"},"poolLength() \u2192 uint256 pools")," (public)"),(0,o.kt)("p",null,"Returns the number of MCV2 pools."),(0,o.kt)("h3",{id:"adduint256-allocpoint-contract-ierc20-_lptoken-contract-irewarder-_rewarder-public"},(0,o.kt)("inlineCode",{parentName:"h3"},"add(uint256 allocPoint, contract IERC20 _lpToken, contract IRewarder _rewarder)")," (public)"),(0,o.kt)("p",null,"Add a new LP to the pool. Can only be called by the owner. DO NOT add the same\nLP token more than once. Rewards will be messed up if you do."),(0,o.kt)("h3",{id:"setuint256-_pid-uint256-_allocpoint-contract-irewarder-_rewarder-bool-overwrite-public"},(0,o.kt)("inlineCode",{parentName:"h3"},"set(uint256 _pid, uint256 _allocPoint, contract IRewarder _rewarder, bool overwrite)")," (public)"),(0,o.kt)("p",null,"Update the given pool's SUSHI allocation point and ",(0,o.kt)("inlineCode",{parentName:"p"},"IRewarder")," contract. Can\nonly be called by the owner."),(0,o.kt)("h3",{id:"setsushiperseconduint256-_sushipersecond-public"},(0,o.kt)("inlineCode",{parentName:"h3"},"setSushiPerSecond(uint256 _sushiPerSecond)")," (public)"),(0,o.kt)("p",null,"Sets the sushi per second to be distributed. Can only be called by the owner."),(0,o.kt)("h3",{id:"setmigratorcontract-imigratorchef-_migrator-public"},(0,o.kt)("inlineCode",{parentName:"h3"},"setMigrator(contract IMigratorChef _migrator)")," (public)"),(0,o.kt)("p",null,"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"migrator")," contract. Can only be called by the owner."),(0,o.kt)("h3",{id:"migrateuint256-_pid-public"},(0,o.kt)("inlineCode",{parentName:"h3"},"migrate(uint256 _pid)")," (public)"),(0,o.kt)("p",null,"Migrate LP token to another LP contract through the ",(0,o.kt)("inlineCode",{parentName:"p"},"migrator")," contract."),(0,o.kt)("h3",{id:"pendingsushiuint256-_pid-address-_user--uint256-pending-external"},(0,o.kt)("inlineCode",{parentName:"h3"},"pendingSushi(uint256 _pid, address _user) \u2192 uint256 pending")," (external)"),(0,o.kt)("p",null,"View function to see pending SUSHI on frontend."),(0,o.kt)("h3",{id:"massupdatepoolsuint256-pids-external"},(0,o.kt)("inlineCode",{parentName:"h3"},"massUpdatePools(uint256[] pids)")," (external)"),(0,o.kt)("p",null,"Update reward variables for all pools. Be careful of gas spending!"),(0,o.kt)("h3",{id:"updatepooluint256-pid--struct-minichefv2poolinfo-pool-public"},(0,o.kt)("inlineCode",{parentName:"h3"},"updatePool(uint256 pid) \u2192 struct MiniChefV2.PoolInfo pool")," (public)"),(0,o.kt)("p",null,"Update reward variables of the given pool."),(0,o.kt)("h3",{id:"deposituint256-pid-uint256-amount-address-to-public"},(0,o.kt)("inlineCode",{parentName:"h3"},"deposit(uint256 pid, uint256 amount, address to)")," (public)"),(0,o.kt)("p",null,"Deposit LP tokens to MCV2 for SUSHI allocation."),(0,o.kt)("h3",{id:"withdrawuint256-pid-uint256-amount-address-to-public"},(0,o.kt)("inlineCode",{parentName:"h3"},"withdraw(uint256 pid, uint256 amount, address to)")," (public)"),(0,o.kt)("p",null,"Withdraw LP tokens from MCV2."),(0,o.kt)("h3",{id:"harvestuint256-pid-address-to-public"},(0,o.kt)("inlineCode",{parentName:"h3"},"harvest(uint256 pid, address to)")," (public)"),(0,o.kt)("p",null,"Harvest proceeds for transaction sender to ",(0,o.kt)("inlineCode",{parentName:"p"},"to"),"."),(0,o.kt)("h3",{id:"withdrawandharvestuint256-pid-uint256-amount-address-to-public"},(0,o.kt)("inlineCode",{parentName:"h3"},"withdrawAndHarvest(uint256 pid, uint256 amount, address to)")," (public)"),(0,o.kt)("p",null,"Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to\n",(0,o.kt)("inlineCode",{parentName:"p"},"to"),"."),(0,o.kt)("h3",{id:"emergencywithdrawuint256-pid-address-to-public"},(0,o.kt)("inlineCode",{parentName:"h3"},"emergencyWithdraw(uint256 pid, address to)")," (public)"),(0,o.kt)("p",null,"Withdraw without caring about rewards. EMERGENCY ONLY."),(0,o.kt)("h3",{id:"depositaddress-user-uint256-pid-uint256-amount-address-to"},(0,o.kt)("inlineCode",{parentName:"h3"},"Deposit(address user, uint256 pid, uint256 amount, address to)")),(0,o.kt)("h3",{id:"withdrawaddress-user-uint256-pid-uint256-amount-address-to"},(0,o.kt)("inlineCode",{parentName:"h3"},"Withdraw(address user, uint256 pid, uint256 amount, address to)")),(0,o.kt)("h3",{id:"emergencywithdrawaddress-user-uint256-pid-uint256-amount-address-to"},(0,o.kt)("inlineCode",{parentName:"h3"},"EmergencyWithdraw(address user, uint256 pid, uint256 amount, address to)")),(0,o.kt)("h3",{id:"harvestaddress-user-uint256-pid-uint256-amount"},(0,o.kt)("inlineCode",{parentName:"h3"},"Harvest(address user, uint256 pid, uint256 amount)")),(0,o.kt)("h3",{id:"logpooladditionuint256-pid-uint256-allocpoint-contract-ierc20-lptoken-contract-irewarder-rewarder"},(0,o.kt)("inlineCode",{parentName:"h3"},"LogPoolAddition(uint256 pid, uint256 allocPoint, contract IERC20 lpToken, contract IRewarder rewarder)")),(0,o.kt)("h3",{id:"logsetpooluint256-pid-uint256-allocpoint-contract-irewarder-rewarder-bool-overwrite"},(0,o.kt)("inlineCode",{parentName:"h3"},"LogSetPool(uint256 pid, uint256 allocPoint, contract IRewarder rewarder, bool overwrite)")),(0,o.kt)("h3",{id:"logupdatepooluint256-pid-uint64-lastrewardtime-uint256-lpsupply-uint256-accsushipershare"},(0,o.kt)("inlineCode",{parentName:"h3"},"LogUpdatePool(uint256 pid, uint64 lastRewardTime, uint256 lpSupply, uint256 accSushiPerShare)")),(0,o.kt)("h3",{id:"logsushiperseconduint256-sushipersecond"},(0,o.kt)("inlineCode",{parentName:"h3"},"LogSushiPerSecond(uint256 sushiPerSecond)")),(0,o.kt)("h3",{id:"userinfo"},(0,o.kt)("inlineCode",{parentName:"h3"},"UserInfo")),(0,o.kt)("p",null,"uint256 amount"),(0,o.kt)("p",null,"int256 rewardDebt"),(0,o.kt)("h3",{id:"poolinfo"},(0,o.kt)("inlineCode",{parentName:"h3"},"PoolInfo")),(0,o.kt)("p",null,"uint128 accSushiPerShare"),(0,o.kt)("p",null,"uint64 lastRewardTime"),(0,o.kt)("p",null,"uint64 allocPoint"))}c.isMDXComponent=!0}}]);