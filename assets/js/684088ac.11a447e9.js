"use strict";(self.webpackChunk_sushiswap_kitchen_docs=self.webpackChunk_sushiswap_kitchen_docs||[]).push([[5788],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>b});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=i.createContext({}),d=function(e){var t=i.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return i.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=d(n),b=r,f=p["".concat(u,".").concat(b)]||p[b]||c[b]||a;return n?i.createElement(f,o(o({ref:t},s),{},{components:n})):i.createElement(f,o({ref:t},s))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=p;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<a;d++)o[d]=n[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2644:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var i=n(7462),r=(n(7294),n(3905));const a={},o=void 0,l={unversionedId:"bentobox/libraries/SignedSafeMath",id:"bentobox/libraries/SignedSafeMath",title:"SignedSafeMath",description:"SignedSafeMath",source:"@site/docs/bentobox/libraries/SignedSafeMath.md",sourceDirName:"bentobox/libraries",slug:"/bentobox/libraries/SignedSafeMath",permalink:"/docs/bentobox/libraries/SignedSafeMath",editUrl:"https://github.com/manifoldfinance/sushi-doc-portal/edit/master/docs/bentobox/libraries/SignedSafeMath.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SafeMath128",permalink:"/docs/bentobox/libraries/SafeMath128"},next:{title:"CloneRewarderTime",permalink:"/docs/bentobox/mocks/CloneRewarderTime"}},u={},d=[{value:"<code>SignedSafeMath</code>",id:"signedsafemath",level:2},{value:"<code>mul(int256 a, int256 b) \u2192 int256</code> (internal)",id:"mulint256-a-int256-b--int256-internal",level:3},{value:"<code>div(int256 a, int256 b) \u2192 int256</code> (internal)",id:"divint256-a-int256-b--int256-internal",level:3},{value:"<code>sub(int256 a, int256 b) \u2192 int256</code> (internal)",id:"subint256-a-int256-b--int256-internal",level:3},{value:"<code>add(int256 a, int256 b) \u2192 int256</code> (internal)",id:"addint256-a-int256-b--int256-internal",level:3},{value:"<code>toUInt256(int256 a) \u2192 uint256</code> (internal)",id:"touint256int256-a--uint256-internal",level:3}],s={toc:d};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"signedsafemath"},(0,r.kt)("inlineCode",{parentName:"h2"},"SignedSafeMath")),(0,r.kt)("h3",{id:"mulint256-a-int256-b--int256-internal"},(0,r.kt)("inlineCode",{parentName:"h3"},"mul(int256 a, int256 b) \u2192 int256")," (internal)"),(0,r.kt)("p",null,"Returns the multiplication of two signed integers, reverting on overflow."),(0,r.kt)("p",null,"Counterpart to Solidity's ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," operator."),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Multiplication cannot overflow.")),(0,r.kt)("h3",{id:"divint256-a-int256-b--int256-internal"},(0,r.kt)("inlineCode",{parentName:"h3"},"div(int256 a, int256 b) \u2192 int256")," (internal)"),(0,r.kt)("p",null,"Returns the integer division of two signed integers. Reverts on division by\nzero. The result is rounded towards zero."),(0,r.kt)("p",null,"Counterpart to Solidity's ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," operator. Note: this function uses a ",(0,r.kt)("inlineCode",{parentName:"p"},"revert"),"\nopcode (which leaves remaining gas untouched) while Solidity uses an invalid\nopcode to revert (consuming all remaining gas)."),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The divisor cannot be zero.")),(0,r.kt)("h3",{id:"subint256-a-int256-b--int256-internal"},(0,r.kt)("inlineCode",{parentName:"h3"},"sub(int256 a, int256 b) \u2192 int256")," (internal)"),(0,r.kt)("p",null,"Returns the subtraction of two signed integers, reverting on overflow."),(0,r.kt)("p",null,"Counterpart to Solidity's ",(0,r.kt)("inlineCode",{parentName:"p"},"-")," operator."),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Subtraction cannot overflow.")),(0,r.kt)("h3",{id:"addint256-a-int256-b--int256-internal"},(0,r.kt)("inlineCode",{parentName:"h3"},"add(int256 a, int256 b) \u2192 int256")," (internal)"),(0,r.kt)("p",null,"Returns the addition of two signed integers, reverting on overflow."),(0,r.kt)("p",null,"Counterpart to Solidity's ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," operator."),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Addition cannot overflow.")),(0,r.kt)("h3",{id:"touint256int256-a--uint256-internal"},(0,r.kt)("inlineCode",{parentName:"h3"},"toUInt256(int256 a) \u2192 uint256")," (internal)"))}c.isMDXComponent=!0}}]);