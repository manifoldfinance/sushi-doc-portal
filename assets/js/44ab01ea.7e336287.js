"use strict";(self.webpackChunk_sushiswap_kitchen_docs=self.webpackChunk_sushiswap_kitchen_docs||[]).push([[792],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>u});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=n.createContext({}),p=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=p(r),u=a,k=s["".concat(d,".").concat(u)]||s[u]||m[u]||o;return r?n.createElement(k,i(i({ref:t},c),{},{components:r})):n.createElement(k,i({ref:t},c))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=s;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},84578:(e,t,r)=>{r.r(t),r.d(t,{frontMatter:()=>o,contentTitle:()=>i,metadata:()=>l,toc:()=>d,default:()=>c});var n=r(87462),a=(r(67294),r(3905));const o={sidebar_position:8},i="Predicate",l={unversionedId:"limit-order-protocol/guide/predicate",id:"limit-order-protocol/guide/predicate",isDocsHomePage:!1,title:"Predicate",description:"LimitOrderPredicateBuilder",source:"@site/docs/limit-order-protocol/guide/predicate.md",sourceDirName:"limit-order-protocol/guide",slug:"/limit-order-protocol/guide/predicate",permalink:"/docs/limit-order-protocol/guide/predicate",editUrl:"https://github.com/manifoldfinance/sushi-docs/edit/master/docs/limit-order-protocol/guide/predicate.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Nonce",permalink:"/docs/limit-order-protocol/guide/nonce"},next:{title:"Limit order remaining",permalink:"/docs/limit-order-protocol/guide/remaining"}},d=[{value:"Conditional operators:",id:"conditional-operators",children:[]},{value:"Comparative operators:",id:"comparative-operators",children:[]},{value:"Built-in operators:",id:"built-in-operators",children:[]},{value:"Example:",id:"example",children:[]}],p={toc:d};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"predicate"},"Predicate"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"LimitOrderPredicateBuilder")),(0,a.kt)("p",null,"A limit order can contain one or more predicates that indicate the logic of its validity.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"There are two types of predicate operators:")),(0,a.kt)("h2",{id:"conditional-operators"},"Conditional operators:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"and")),(0,a.kt)("td",{parentName:"tr",align:null},"combine several predicates, return ",(0,a.kt)("inlineCode",{parentName:"td"},"true")," when all predicates are valid")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"or")),(0,a.kt)("td",{parentName:"tr",align:null},"combine several predicates, return ",(0,a.kt)("inlineCode",{parentName:"td"},"true")," when one of predicates is valid")))),(0,a.kt)("h2",{id:"comparative-operators"},"Comparative operators:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"All comparative operators have three arguments:",(0,a.kt)("br",{parentName:"p"}),"\n","(",(0,a.kt)("strong",{parentName:"p"},"value"),": string, ",(0,a.kt)("strong",{parentName:"p"},"address"),": string, ",(0,a.kt)("strong",{parentName:"p"},"callData"),": string)")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"How the operators works:"),(0,a.kt)("br",{parentName:"p"}),"\n","On an operator call, the contract execute the ",(0,a.kt)("inlineCode",{parentName:"p"},"callData")," for the ",(0,a.kt)("inlineCode",{parentName:"p"},"address")," and compare ",(0,a.kt)("em",{parentName:"p"},(0,a.kt)("strong",{parentName:"em"},"a result"))," with the ",(0,a.kt)("inlineCode",{parentName:"p"},"value"))),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"eq")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},(0,a.kt)("strong",{parentName:"em"},"a result"))," must be equal to the ",(0,a.kt)("inlineCode",{parentName:"td"},"value"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"lt")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},(0,a.kt)("strong",{parentName:"em"},"a result"))," must be less than the ",(0,a.kt)("inlineCode",{parentName:"td"},"value"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"gt")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},(0,a.kt)("strong",{parentName:"em"},"a result"))," must be greater than the ",(0,a.kt)("inlineCode",{parentName:"td"},"value"))))),(0,a.kt)("h2",{id:"built-in-operators"},"Built-in operators:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"nonceEquals(makerAddress: string, makerNonce: number)"))),(0,a.kt)("p",null,"The predicate checks that the ",(0,a.kt)("inlineCode",{parentName:"p"},"makerNonce")," is equal to the nonce of ",(0,a.kt)("inlineCode",{parentName:"p"},"makerAddress")),(0,a.kt)("hr",null),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"timestampBelow(timestamp: number)"))),(0,a.kt)("p",null,"The predicate checks that ",(0,a.kt)("inlineCode",{parentName:"p"},"timestamp")," is greater than the current time"),(0,a.kt)("h2",{id:"example"},"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import Web3 from 'web3';\nimport {\n    LimitOrderProtocolFacade,\n    LimitOrderPredicateBuilder,\n    LimitOrderPredicateCallData,\n    Web3ProviderConnector,\n} from '@1inch/limit-order-protocol';\n\nconst makerAddress = '0x5fa31604fc5dcebfcac2481f9fa59d174126e5e6';\nconst tokenAddress = '0xcc83bc1050244c98ac562f9faff408f069a137d7';\nconst balanceOfCallData = '0x000...000';\nconst contractAddress = '0x5fa31604fc5dcebfcac2481f9fa59d174126e5e6';\n\nconst connector = new Web3ProviderConnector(new Web3('...'));\nconst limitOrderProtocolFacade = new LimitOrderProtocolFacade(\n    contractAddress,\n    connector\n);\nconst limitOrderPredicateBuilder = new LimitOrderPredicateBuilder(\n    limitOrderProtocolFacade\n);\n\nconst {\n    or,\n    and,\n    timestampBelow,\n    nonceEquals,\n    gt,\n    lt,\n    eq,\n} = limitOrderPredicateBuilder;\n\nconst simplePredicate: LimitOrderPredicateCallData = and(\n    timestampBelow(Math.round(Date.now() / 1000) + 60_000), // a limit order is valid only for 1 minute\n    nonceEquals(makerAddress, 4) // a limit order is valid until the nonce of makerAddress is equal to 4\n);\n\nconst complexPredicate: LimitOrderPredicateCallData = or(\n    and(\n        timestampBelow(Math.round(Date.now() / 1000) + 60_000),\n        nonceEquals(makerAddress, 4),\n        gt('10', tokenAddress, balanceOfCallData)\n    ),\n    or(timestampBelow(5444440000), lt('20', tokenAddress, balanceOfCallData)),\n    eq('30', tokenAddress, balanceOfCallData)\n);\n")))}c.isMDXComponent=!0}}]);