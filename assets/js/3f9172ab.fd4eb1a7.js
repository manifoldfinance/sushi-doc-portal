"use strict";(self.webpackChunk_sushiswap_kitchen_docs=self.webpackChunk_sushiswap_kitchen_docs||[]).push([[8086],{3905:(e,r,n)=>{n.d(r,{Zo:()=>l,kt:()=>m});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function d(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=t.createContext({}),c=function(e){var r=t.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):d(d({},r),e)),n},l=function(e){var r=c(e.components);return t.createElement(u.Provider,{value:r},e.children)},s={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,w=p["".concat(u,".").concat(m)]||p[m]||s[m]||a;return n?t.createElement(w,d(d({ref:r},l),{},{components:n})):t.createElement(w,d({ref:r},l))}));function m(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,d=new Array(a);d[0]=p;var i={};for(var u in r)hasOwnProperty.call(r,u)&&(i[u]=r[u]);i.originalType=e,i.mdxType="string"==typeof e?e:o,d[1]=i;for(var c=2;c<a;c++)d[c]=n[c];return t.createElement.apply(null,d)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1605:(e,r,n)=>{n.r(r),n.d(r,{frontMatter:()=>a,contentTitle:()=>d,metadata:()=>i,toc:()=>u,default:()=>l});var t=n(7462),o=(n(7294),n(3905));const a={},d=void 0,i={unversionedId:"bentobox/mocks/CloneRewarderTimeDual",id:"bentobox/mocks/CloneRewarderTimeDual",isDocsHomePage:!1,title:"CloneRewarderTimeDual",description:"CloneRewarderTimeDual",source:"@site/docs/bentobox/mocks/CloneRewarderTimeDual.md",sourceDirName:"bentobox/mocks",slug:"/bentobox/mocks/CloneRewarderTimeDual",permalink:"/docs/bentobox/mocks/CloneRewarderTimeDual",editUrl:"https://github.com/manifoldfinance/sushi-doc-portal/edit/master/docs/bentobox/mocks/CloneRewarderTimeDual.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CloneRewarderTime",permalink:"/docs/bentobox/mocks/CloneRewarderTime"},next:{title:"ComplexRewarder",permalink:"/docs/bentobox/mocks/ComplexRewarder"}},u=[{value:"<code>CloneRewarderTimeDual</code>",id:"clonerewardertimedual",children:[{value:"<code>lock()</code>",id:"lock",children:[]},{value:"<code>onlyMCV2()</code>",id:"onlymcv2",children:[]},{value:"<code>constructor(address _MASTERCHEF_V2)</code> (public)",id:"constructoraddress-_masterchef_v2-public",children:[]},{value:"<code>init(bytes data)</code> (public)",id:"initbytes-data-public",children:[]},{value:"<code>onSushiReward(uint256 pid, address _user, address to, uint256, uint256 lpTokenAmount)</code> (external)",id:"onsushirewarduint256-pid-address-_user-address-to-uint256-uint256-lptokenamount-external",children:[]},{value:"<code>pendingTokens(uint256 pid, address user, uint256) \u2192 contract IERC20[] rewardTokens, uint256[] rewardAmounts</code> (external)",id:"pendingtokensuint256-pid-address-user-uint256--contract-ierc20-rewardtokens-uint256-rewardamounts-external",children:[]},{value:"<code>rewardRates() \u2192 uint256[]</code> (external)",id:"rewardrates--uint256-external",children:[]},{value:"<code>setRewardPerSecond(uint128 _rewardPerSecond1, uint128 _rewardPerSecond2)</code> (public)",id:"setrewardperseconduint128-_rewardpersecond1-uint128-_rewardpersecond2-public",children:[]},{value:"<code>reclaimTokens(address token, uint256 amount, address payable to)</code> (public)",id:"reclaimtokensaddress-token-uint256-amount-address-payable-to-public",children:[]},{value:"<code>pendingToken(uint256 _pid, address _user) \u2192 uint256 reward1, uint256 reward2</code> (public)",id:"pendingtokenuint256-_pid-address-_user--uint256-reward1-uint256-reward2-public",children:[]},{value:"<code>updatePool(uint256 pid) \u2192 struct CloneRewarderTimeDual.PoolInfo pool</code> (public)",id:"updatepooluint256-pid--struct-clonerewardertimedualpoolinfo-pool-public",children:[]},{value:"<code>LogOnReward(address user, uint256 pid, uint256 amount1, uint256 amount2, address to)</code>",id:"logonrewardaddress-user-uint256-pid-uint256-amount1-uint256-amount2-address-to",children:[]},{value:"<code>LogUpdatePool(uint256 pid, uint64 lastRewardTime, uint256 lpSupply, uint256 accToken1PerShare, uint256 accToken2PerShare)</code>",id:"logupdatepooluint256-pid-uint64-lastrewardtime-uint256-lpsupply-uint256-acctoken1pershare-uint256-acctoken2pershare",children:[]},{value:"<code>LogRewardPerSecond(uint256 rewardPerSecond1, uint256 rewardPerSecond2)</code>",id:"logrewardperseconduint256-rewardpersecond1-uint256-rewardpersecond2",children:[]},{value:"<code>LogInit(contract IERC20 rewardToken1, contract IERC20 rewardToken2, address owner, uint256 rewardPerSecond1, uint256 rewardPerSecond2, contract IERC20 masterLpToken)</code>",id:"loginitcontract-ierc20-rewardtoken1-contract-ierc20-rewardtoken2-address-owner-uint256-rewardpersecond1-uint256-rewardpersecond2-contract-ierc20-masterlptoken",children:[]},{value:"<code>UserInfo</code>",id:"userinfo",children:[]},{value:"<code>PoolInfo</code>",id:"poolinfo",children:[]}]}],c={toc:u};function l(e){let{components:r,...n}=e;return(0,o.kt)("wrapper",(0,t.Z)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"clonerewardertimedual"},(0,o.kt)("inlineCode",{parentName:"h2"},"CloneRewarderTimeDual")),(0,o.kt)("h3",{id:"lock"},(0,o.kt)("inlineCode",{parentName:"h3"},"lock()")),(0,o.kt)("h3",{id:"onlymcv2"},(0,o.kt)("inlineCode",{parentName:"h3"},"onlyMCV2()")),(0,o.kt)("h3",{id:"constructoraddress-_masterchef_v2-public"},(0,o.kt)("inlineCode",{parentName:"h3"},"constructor(address _MASTERCHEF_V2)")," (public)"),(0,o.kt)("h3",{id:"initbytes-data-public"},(0,o.kt)("inlineCode",{parentName:"h3"},"init(bytes data)")," (public)"),(0,o.kt)("p",null,"Serves as the constructor for clones, as clones can't have a regular constructor"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"data")," is abi encoded in the format: (IERC20 collateral, IERC20 asset, IOracle oracle, bytes oracleData)"),(0,o.kt)("h3",{id:"onsushirewarduint256-pid-address-_user-address-to-uint256-uint256-lptokenamount-external"},(0,o.kt)("inlineCode",{parentName:"h3"},"onSushiReward(uint256 pid, address _user, address to, uint256, uint256 lpTokenAmount)")," (external)"),(0,o.kt)("h3",{id:"pendingtokensuint256-pid-address-user-uint256--contract-ierc20-rewardtokens-uint256-rewardamounts-external"},(0,o.kt)("inlineCode",{parentName:"h3"},"pendingTokens(uint256 pid, address user, uint256) \u2192 contract IERC20[] rewardTokens, uint256[] rewardAmounts")," (external)"),(0,o.kt)("h3",{id:"rewardrates--uint256-external"},(0,o.kt)("inlineCode",{parentName:"h3"},"rewardRates() \u2192 uint256[]")," (external)"),(0,o.kt)("h3",{id:"setrewardperseconduint128-_rewardpersecond1-uint128-_rewardpersecond2-public"},(0,o.kt)("inlineCode",{parentName:"h3"},"setRewardPerSecond(uint128 _rewardPerSecond1, uint128 _rewardPerSecond2)")," (public)"),(0,o.kt)("p",null,"Sets the sushi per second to be distributed. Can only be called by the owner."),(0,o.kt)("h3",{id:"reclaimtokensaddress-token-uint256-amount-address-payable-to-public"},(0,o.kt)("inlineCode",{parentName:"h3"},"reclaimTokens(address token, uint256 amount, address payable to)")," (public)"),(0,o.kt)("p",null,"Allows owner to reclaim/withdraw any tokens (including reward tokens) held by this contract"),(0,o.kt)("h3",{id:"pendingtokenuint256-_pid-address-_user--uint256-reward1-uint256-reward2-public"},(0,o.kt)("inlineCode",{parentName:"h3"},"pendingToken(uint256 _pid, address _user) \u2192 uint256 reward1, uint256 reward2")," (public)"),(0,o.kt)("p",null,"View function to see pending Token"),(0,o.kt)("h3",{id:"updatepooluint256-pid--struct-clonerewardertimedualpoolinfo-pool-public"},(0,o.kt)("inlineCode",{parentName:"h3"},"updatePool(uint256 pid) \u2192 struct CloneRewarderTimeDual.PoolInfo pool")," (public)"),(0,o.kt)("p",null,"Update reward variables of the given pool."),(0,o.kt)("h3",{id:"logonrewardaddress-user-uint256-pid-uint256-amount1-uint256-amount2-address-to"},(0,o.kt)("inlineCode",{parentName:"h3"},"LogOnReward(address user, uint256 pid, uint256 amount1, uint256 amount2, address to)")),(0,o.kt)("h3",{id:"logupdatepooluint256-pid-uint64-lastrewardtime-uint256-lpsupply-uint256-acctoken1pershare-uint256-acctoken2pershare"},(0,o.kt)("inlineCode",{parentName:"h3"},"LogUpdatePool(uint256 pid, uint64 lastRewardTime, uint256 lpSupply, uint256 accToken1PerShare, uint256 accToken2PerShare)")),(0,o.kt)("h3",{id:"logrewardperseconduint256-rewardpersecond1-uint256-rewardpersecond2"},(0,o.kt)("inlineCode",{parentName:"h3"},"LogRewardPerSecond(uint256 rewardPerSecond1, uint256 rewardPerSecond2)")),(0,o.kt)("h3",{id:"loginitcontract-ierc20-rewardtoken1-contract-ierc20-rewardtoken2-address-owner-uint256-rewardpersecond1-uint256-rewardpersecond2-contract-ierc20-masterlptoken"},(0,o.kt)("inlineCode",{parentName:"h3"},"LogInit(contract IERC20 rewardToken1, contract IERC20 rewardToken2, address owner, uint256 rewardPerSecond1, uint256 rewardPerSecond2, contract IERC20 masterLpToken)")),(0,o.kt)("h3",{id:"userinfo"},(0,o.kt)("inlineCode",{parentName:"h3"},"UserInfo")),(0,o.kt)("p",null,"uint256 amount"),(0,o.kt)("p",null,"uint256 rewardDebt1"),(0,o.kt)("p",null,"uint256 rewardDebt2"),(0,o.kt)("p",null,"uint256 unpaidRewards1"),(0,o.kt)("p",null,"uint256 unpaidRewards2"),(0,o.kt)("h3",{id:"poolinfo"},(0,o.kt)("inlineCode",{parentName:"h3"},"PoolInfo")),(0,o.kt)("p",null,"uint128 accToken1PerShare"),(0,o.kt)("p",null,"uint128 accToken2PerShare"),(0,o.kt)("p",null,"uint64 lastRewardTime"))}l.isMDXComponent=!0}}]);