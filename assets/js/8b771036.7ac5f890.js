"use strict";(self.webpackChunk_sushiswap_kitchen_docs=self.webpackChunk_sushiswap_kitchen_docs||[]).push([[295],{3905:(e,r,t)=>{t.d(r,{Zo:()=>s,kt:()=>m});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=n.createContext({}),l=function(e){var r=n.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},s=function(e){var r=l(e.components);return n.createElement(d.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=l(t),m=o,f=u["".concat(d,".").concat(m)]||u[m]||p[m]||i;return t?n.createElement(f,a(a({ref:r},s),{},{components:t})):n.createElement(f,a({ref:r},s))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var c={};for(var d in r)hasOwnProperty.call(r,d)&&(c[d]=r[d]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=t[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},38373:(e,r,t)=>{t.r(r),t.d(r,{frontMatter:()=>i,contentTitle:()=>a,metadata:()=>c,toc:()=>d,default:()=>s});var n=t(87462),o=(t(67294),t(3905));const i={sidebar_position:2},a="Quick start",c={unversionedId:"limit-order-protocol/guide/quick-start",id:"limit-order-protocol/guide/quick-start",isDocsHomePage:!1,title:"Quick start",description:"Example, how to create and fill a limit order:",source:"@site/docs/limit-order-protocol/guide/quick-start.md",sourceDirName:"limit-order-protocol/guide",slug:"/limit-order-protocol/guide/quick-start",permalink:"/docs/limit-order-protocol/guide/quick-start",editUrl:"https://github.com/manifoldfinance/sushi-docs/edit/master/docs/limit-order-protocol/guide/quick-start.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/limit-order-protocol/introduction"},next:{title:"Create a limit order",permalink:"/docs/limit-order-protocol/guide/create-limit-order"}},d=[],l={toc:d};function s(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"quick-start"},"Quick start"),(0,o.kt)("p",null,"Example, how to create and fill a limit order:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import Web3 from 'web3';\nimport {\n    LimitOrderBuilder,\n    LimitOrderProtocolFacade,\n    Web3ProviderConnector,\n} from '@1inch/limit-order-protocol';\n\nconst contractAddress = '0x5fa31604fc5dcebfcac2481f9fa59d174126e5e6';\nconst walletAddress = '0x4758822de63992df27cacf1ba11417bbacace033';\nconst chainId = 1;\n\nconst web3 = new Web3('...');\n// You can create and use a custom provider connector (for example: ethers)\nconst connector = new Web3ProviderConnector(web3);\n\nconst limitOrderBuilder = new LimitOrderBuilder(\n    contractAddress,\n    chainId,\n    connector\n);\n\nconst limitOrderProtocolFacade = new LimitOrderProtocolFacade(\n    contractAddress,\n    connector\n);\n\n// Create a limit order and it's signature\nconst limitOrder = limitOrderBuilder.buildLimitOrder({\n    makerAssetAddress: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n    takerAssetAddress: '0x111111111117dc0aa78b770fa6a738034120c302',\n    makerAddress: walletAddress,\n    makerAmount: '100',\n    takerAmount: '200',\n    predicate: '0x0',\n    permit: '0x0',\n    interaction: '0x0',\n});\nconst limitOrderTypedData = limitOrderBuilder.buildLimitOrderTypedData(\n    limitOrder\n);\nconst limitOrderSignature = limitOrderBuilder.buildOrderSignature(\n    walletAddress,\n    limitOrderTypedData\n);\n\n// Create a call data for fill the limit order\nconst callData = limitOrderProtocolFacade.fillLimitOrder(\n    limitOrder,\n    limitOrderSignature,\n    '100',\n    '0',\n    '50'\n);\n\n// Send transaction for the order filling\n// Must be implemented\nsendTransaction({\n    from: walletAddress,\n    gas: 210_000, // Set your gas limit\n    gasPrice: 40000, // Set your gas price\n    to: contractAddress,\n    data: callData,\n});\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," you can use any implementation for the provider.",(0,o.kt)("br",{parentName:"p"}),"\n","Just implement the ",(0,o.kt)("inlineCode",{parentName:"p"},"ProviderConnector")," interface:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"class MyProviderConnector implements ProviderConnector {\n    //...\n}\n")))}s.isMDXComponent=!0}}]);